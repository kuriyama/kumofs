AC_INIT(src/logic/boot.h)
AC_CONFIG_AUX_DIR(ac)
AM_INIT_AUTOMAKE(kumofs, 0.3.1)
AC_CONFIG_HEADER(config.h)


AC_SUBST(CFLAGS)
if test "" = "$CFLAGS"; then
	CFLAGS="-O4"
fi
CFLAGS="-O4 -Wall $CFLAGS"


AC_SUBST(CXXFLAGS)
if test "" = "$CXXFLAGS"; then
	CXXFLAGS="-O4"
fi
CXXFLAGS="-O4 -Wall $CXXFLAGS"


AC_CHECK_PROG(RUBY, ruby, ruby)
if test "x$RUBY" = x; then
	AC_MSG_ERROR([cannot find ruby. Ruby is needed to build.])
fi

AC_CHECK_PROG(ERB, erb, erb)
if test "x$ERB" = x; then
	AC_MSG_ERROR([cannot find erb. Ruby is needed to build.])
fi

AC_CHECK_PROG(RAGEL, ragel, ragel)
if test "x$RAGEL" = x; then
	#AC_MSG_ERROR([cannot find ragel. Ragel is needed to build.])
	RAGEL=ragel
fi


AC_PROG_CC
AC_PROG_CXX

AC_PROG_LIBTOOL
AM_PROG_AS
AM_PROG_CC_C_O


AC_ARG_WITH([msgpack],
	AS_HELP_STRING([--with-msgpack=DIR],
				   [specify the root directory for msgpack library]),
	[msgpack_path="$withval"], [])
if test "$msgpack_path" != ""; then
	CXXFLAGS="$CXXFLAGS -I$msgpack_path/include"
	CFLAGS="$CFLAGS -I$msgpack_path/include"
	LDFLAGS="$LDFLAGS -L$msgpack_path/lib"
fi


storage_type="tchdb"


AC_ARG_WITH([tokyocabinet],
	AS_HELP_STRING([--with-tokyocabinet@<:@=DIR@:>@],
				   [use Tokyo Cabinet for the backend storage]),
	[tokyocabinet_path="$withval"], [])
if test "$tokyocabinet_path" != ""; then
	CXXFLAGS="$CXXFLAGS -I$tokyocabinet_path/include"
	CFLAGS="$CFLAGS -I$tokyocabinet_path/include"
	LDFLAGS="$LDFLAGS -L$tokyocabinet_path/lib"
fi


#AC_ARG_WITH([luxio],
#	AS_HELP_STRING([--with-luxio@<:@=DIR@:>@],
#				   [use LuxIO for the backend storage (NOT IMPLEMENTED)]),
#	[luxio_path="$withval"], [])
#if test "$luxio_path" != ""; then
#	storage_type="luxio"
#	CXXFLAGS="$CXXFLAGS -I$luxio_path/include"
#	CFLAGS="$CFLAGS -I$luxio_path/include"
#	LDFLAGS="$LDFLAGS -L$luxio_path/lib"
#fi


AC_MSG_CHECKING([if tcbdb is enabled])
AC_ARG_ENABLE(tcbdb,
	AS_HELP_STRING([--enable-tcbdb],
				   [use tcbdb instead of tchdb.]) )
if test "$enable_tcbdb" = "yes"; then
	storage_type="tcbdb"
fi
AC_MSG_RESULT($enable_tcbdb)


AC_MSG_CHECKING([if tcadb is enabled])
AC_ARG_ENABLE(tcadb,
	AS_HELP_STRING([--enable-tcadb],
				   [use tcadb instead of tchdb.]) )
if test "$enable_tcadb" = "yes"; then
	storage_type="tcadb"
fi
AC_MSG_RESULT($enable_tcadb)



AC_MSG_CHECKING([if tcmalloc is enabled])
AC_ARG_WITH([tcmalloc],
	AS_HELP_STRING([--with-tcmalloc@<:@=DIR@:>@],
				   [link libtcmalloc]),
	[with_tcmalloc="$withval"], [with_tcmalloc="no"])
AC_MSG_RESULT($with_tcmalloc)
if test "$with_tcmalloc" != "no"; then
	if test "$with_tcmalloc" != "yes"; then
		LDFLAGS="$LDFLAGS -L$with_tcmalloc/lib"
		LDFLAGS="$LDFLAGS -L$with_tcmalloc/lib64"
	fi
	AC_CHECK_LIB(tcmalloc,malloc,,
		AC_MSG_ERROR([Can't find tcmalloc library]))
fi


AC_CHECK_LIB(stdc++, main)

AC_CHECK_LIB(pthread,pthread_create,,
	AC_MSG_ERROR([Can't find pthread library]))

AC_CHECK_LIB(z,deflate,,
	AC_MSG_ERROR([Can't find zlib library]))

AC_CHECK_HEADERS(openssl/sha.h,,
	AC_MSG_ERROR([Can't find openssl header]))
AC_CHECK_LIB(crypto,SHA1,,
	AC_MSG_ERROR([Can't find openssl library]))

AC_CHECK_LIB(msgpack,main,,
	AC_MSG_ERROR([Can't find msgpack library]))

AC_CHECK_LIB(msgpackc,main,,
	AC_MSG_ERROR([Can't find msgpackc library]))

AC_CHECK_HEADERS(tchdb.h,,
	AC_MSG_ERROR([Can't find tokyo cabinet header]))
AC_CHECK_LIB(tokyocabinet,tchdbget,,
	AC_MSG_ERROR([Can't find tokyocabinet library]))


AC_MSG_CHECKING([storage type])
AC_MSG_RESULT($storage_type)

AM_CONDITIONAL(STORAGE_TCHDB, test "$storage_type" = "tchdb")
AM_CONDITIONAL(STORAGE_TCBDB, test "$storage_type" = "tcbdb")
AM_CONDITIONAL(STORAGE_TCADB, test "$storage_type" = "tcadb")
AM_CONDITIONAL(STORAGE_LUXIO, test "$storage_type" = "luxio")

if test "$storage_type" = "tchdb" -o "$storage_type" = "tcbdb" -o "$storage_type" = "tcadb"; then
	CXXFLAGS="$CXXFLAGS -DUSE_TOKYOCABINET"
	CFLAGS="$CFLAGS -DUSE_TOKYOCABINET"
fi

if test "$storage_type" = "luxio"; then
	AC_LANG_PUSH(C++)
	AC_CHECK_HEADERS(luxio/btree.h)   # FIXME luxio UINT8_MAX
	#AC_CHECK_HEADERS(luxio/btree.h,,
	#	AC_MSG_ERROR([Can't find luxio header]))
	AC_LANG_POP
fi



AC_MSG_CHECKING([if debug option is enabled])
AC_ARG_ENABLE(debug,
	AS_HELP_STRING([--disable-debug],
				   [disable assert macros and omit -g option.]) )
if test "$enable_debug" != "no"; then
	CXXFLAGS="$CXXFLAGS -g"
	CFLAGS="$CFLAGS -g"
else
	CXXFLAGS="$CXXFLAGS -DNDEBUG"
	CFLAGS="$CFLAGS -DNDEBUG"
fi
AC_MSG_RESULT($enable_debug)


AC_MSG_CHECKING([if trace message is enabled])
AC_ARG_ENABLE(trace,
	AS_HELP_STRING([--enable-trace], [enable trace messages.]) )
if test "$enable_trace" = "yes"; then
	CXXFLAGS="$CXXFLAGS -DMLOGGER_LEVEL=0"
	CFLAGS="$CFLAGS -DMLOGGER_LEVEL=0"
else
	CXXFLAGS="$CXXFLAGS -DMLOGGER_LEVEL=2"
	CFLAGS="$CFLAGS -DMLOGGER_LEVEL=2"
fi
AC_MSG_RESULT($enable_trace)


AC_OUTPUT([src/mp/Makefile
		   src/mpsrc/Makefile
		   src/gate/Makefile
		   src/storage/Makefile
		   src/log/Makefile
		   src/kazuhiki/Makefile
		   src/rpc/Makefile
		   src/logic/manager/Makefile
		   src/logic/server/Makefile
		   src/logic/gateway/Makefile
		   src/logic/Makefile
		   src/command/Makefile
		   src/Makefile
		   Makefile])

